# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import event_notification_pb2 as event__notification__pb2


class NotificationsStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeCulturalNewsletter = channel.unary_stream(
                '/events.Notifications/SubscribeCulturalNewsletter',
                request_serializer=event__notification__pb2.CulturalNewsletterSubscription.SerializeToString,
                response_deserializer=event__notification__pb2.CulturalEventNotification.FromString,
                )
        self.SubscribeWeatherForecast = channel.unary_stream(
                '/events.Notifications/SubscribeWeatherForecast',
                request_serializer=event__notification__pb2.WeatherForecastSubscription.SerializeToString,
                response_deserializer=event__notification__pb2.WeatherForecastNotification.FromString,
                )


class NotificationsServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SubscribeCulturalNewsletter(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeWeatherForecast(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeCulturalNewsletter': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCulturalNewsletter,
                    request_deserializer=event__notification__pb2.CulturalNewsletterSubscription.FromString,
                    response_serializer=event__notification__pb2.CulturalEventNotification.SerializeToString,
            ),
            'SubscribeWeatherForecast': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeWeatherForecast,
                    request_deserializer=event__notification__pb2.WeatherForecastSubscription.FromString,
                    response_serializer=event__notification__pb2.WeatherForecastNotification.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'events.Notifications', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notifications(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SubscribeCulturalNewsletter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/events.Notifications/SubscribeCulturalNewsletter',
            event__notification__pb2.CulturalNewsletterSubscription.SerializeToString,
            event__notification__pb2.CulturalEventNotification.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeWeatherForecast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/events.Notifications/SubscribeWeatherForecast',
            event__notification__pb2.WeatherForecastSubscription.SerializeToString,
            event__notification__pb2.WeatherForecastNotification.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
