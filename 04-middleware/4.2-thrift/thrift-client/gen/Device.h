/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Device_H
#define Device_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "intelligent_house_types.h"

namespace inthouse {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DeviceIf {
 public:
  virtual ~DeviceIf() {}
  virtual void turnOn(ReplyStatus& _return) = 0;
  virtual void turnOff(ReplyStatus& _return) = 0;
  virtual void powerSavingMode(ReplyStatus& _return) = 0;
  virtual DeviceState::type getDeviceState() = 0;
};

class DeviceIfFactory {
 public:
  typedef DeviceIf Handler;

  virtual ~DeviceIfFactory() {}

  virtual DeviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceIf* /* handler */) = 0;
};

class DeviceIfSingletonFactory : virtual public DeviceIfFactory {
 public:
  DeviceIfSingletonFactory(const ::std::shared_ptr<DeviceIf>& iface) : iface_(iface) {}
  virtual ~DeviceIfSingletonFactory() {}

  virtual DeviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DeviceIf> iface_;
};

class DeviceNull : virtual public DeviceIf {
 public:
  virtual ~DeviceNull() {}
  void turnOn(ReplyStatus& /* _return */) {
    return;
  }
  void turnOff(ReplyStatus& /* _return */) {
    return;
  }
  void powerSavingMode(ReplyStatus& /* _return */) {
    return;
  }
  DeviceState::type getDeviceState() {
    DeviceState::type _return = (DeviceState::type)0;
    return _return;
  }
};


class Device_turnOn_args {
 public:

  Device_turnOn_args(const Device_turnOn_args&);
  Device_turnOn_args& operator=(const Device_turnOn_args&);
  Device_turnOn_args() {
  }

  virtual ~Device_turnOn_args() noexcept;

  bool operator == (const Device_turnOn_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Device_turnOn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_turnOn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Device_turnOn_pargs {
 public:


  virtual ~Device_turnOn_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_turnOn_result__isset {
  _Device_turnOn_result__isset() : success(false) {}
  bool success :1;
} _Device_turnOn_result__isset;

class Device_turnOn_result {
 public:

  Device_turnOn_result(const Device_turnOn_result&);
  Device_turnOn_result& operator=(const Device_turnOn_result&);
  Device_turnOn_result() {
  }

  virtual ~Device_turnOn_result() noexcept;
  ReplyStatus success;

  _Device_turnOn_result__isset __isset;

  void __set_success(const ReplyStatus& val);

  bool operator == (const Device_turnOn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Device_turnOn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_turnOn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_turnOn_presult__isset {
  _Device_turnOn_presult__isset() : success(false) {}
  bool success :1;
} _Device_turnOn_presult__isset;

class Device_turnOn_presult {
 public:


  virtual ~Device_turnOn_presult() noexcept;
  ReplyStatus* success;

  _Device_turnOn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Device_turnOff_args {
 public:

  Device_turnOff_args(const Device_turnOff_args&);
  Device_turnOff_args& operator=(const Device_turnOff_args&);
  Device_turnOff_args() {
  }

  virtual ~Device_turnOff_args() noexcept;

  bool operator == (const Device_turnOff_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Device_turnOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_turnOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Device_turnOff_pargs {
 public:


  virtual ~Device_turnOff_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_turnOff_result__isset {
  _Device_turnOff_result__isset() : success(false) {}
  bool success :1;
} _Device_turnOff_result__isset;

class Device_turnOff_result {
 public:

  Device_turnOff_result(const Device_turnOff_result&);
  Device_turnOff_result& operator=(const Device_turnOff_result&);
  Device_turnOff_result() {
  }

  virtual ~Device_turnOff_result() noexcept;
  ReplyStatus success;

  _Device_turnOff_result__isset __isset;

  void __set_success(const ReplyStatus& val);

  bool operator == (const Device_turnOff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Device_turnOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_turnOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_turnOff_presult__isset {
  _Device_turnOff_presult__isset() : success(false) {}
  bool success :1;
} _Device_turnOff_presult__isset;

class Device_turnOff_presult {
 public:


  virtual ~Device_turnOff_presult() noexcept;
  ReplyStatus* success;

  _Device_turnOff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Device_powerSavingMode_args {
 public:

  Device_powerSavingMode_args(const Device_powerSavingMode_args&);
  Device_powerSavingMode_args& operator=(const Device_powerSavingMode_args&);
  Device_powerSavingMode_args() {
  }

  virtual ~Device_powerSavingMode_args() noexcept;

  bool operator == (const Device_powerSavingMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Device_powerSavingMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_powerSavingMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Device_powerSavingMode_pargs {
 public:


  virtual ~Device_powerSavingMode_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_powerSavingMode_result__isset {
  _Device_powerSavingMode_result__isset() : success(false) {}
  bool success :1;
} _Device_powerSavingMode_result__isset;

class Device_powerSavingMode_result {
 public:

  Device_powerSavingMode_result(const Device_powerSavingMode_result&);
  Device_powerSavingMode_result& operator=(const Device_powerSavingMode_result&);
  Device_powerSavingMode_result() {
  }

  virtual ~Device_powerSavingMode_result() noexcept;
  ReplyStatus success;

  _Device_powerSavingMode_result__isset __isset;

  void __set_success(const ReplyStatus& val);

  bool operator == (const Device_powerSavingMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Device_powerSavingMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_powerSavingMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_powerSavingMode_presult__isset {
  _Device_powerSavingMode_presult__isset() : success(false) {}
  bool success :1;
} _Device_powerSavingMode_presult__isset;

class Device_powerSavingMode_presult {
 public:


  virtual ~Device_powerSavingMode_presult() noexcept;
  ReplyStatus* success;

  _Device_powerSavingMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Device_getDeviceState_args {
 public:

  Device_getDeviceState_args(const Device_getDeviceState_args&);
  Device_getDeviceState_args& operator=(const Device_getDeviceState_args&);
  Device_getDeviceState_args() {
  }

  virtual ~Device_getDeviceState_args() noexcept;

  bool operator == (const Device_getDeviceState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Device_getDeviceState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_getDeviceState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Device_getDeviceState_pargs {
 public:


  virtual ~Device_getDeviceState_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_getDeviceState_result__isset {
  _Device_getDeviceState_result__isset() : success(false) {}
  bool success :1;
} _Device_getDeviceState_result__isset;

class Device_getDeviceState_result {
 public:

  Device_getDeviceState_result(const Device_getDeviceState_result&);
  Device_getDeviceState_result& operator=(const Device_getDeviceState_result&);
  Device_getDeviceState_result() : success((DeviceState::type)0) {
  }

  virtual ~Device_getDeviceState_result() noexcept;
  DeviceState::type success;

  _Device_getDeviceState_result__isset __isset;

  void __set_success(const DeviceState::type val);

  bool operator == (const Device_getDeviceState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Device_getDeviceState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device_getDeviceState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Device_getDeviceState_presult__isset {
  _Device_getDeviceState_presult__isset() : success(false) {}
  bool success :1;
} _Device_getDeviceState_presult__isset;

class Device_getDeviceState_presult {
 public:


  virtual ~Device_getDeviceState_presult() noexcept;
  DeviceState::type* success;

  _Device_getDeviceState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DeviceClient : virtual public DeviceIf {
 public:
  DeviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DeviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void turnOn(ReplyStatus& _return);
  void send_turnOn();
  void recv_turnOn(ReplyStatus& _return);
  void turnOff(ReplyStatus& _return);
  void send_turnOff();
  void recv_turnOff(ReplyStatus& _return);
  void powerSavingMode(ReplyStatus& _return);
  void send_powerSavingMode();
  void recv_powerSavingMode(ReplyStatus& _return);
  DeviceState::type getDeviceState();
  void send_getDeviceState();
  DeviceState::type recv_getDeviceState();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DeviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DeviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DeviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_turnOn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_turnOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_powerSavingMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DeviceProcessor(::std::shared_ptr<DeviceIf> iface) :
    iface_(iface) {
    processMap_["turnOn"] = &DeviceProcessor::process_turnOn;
    processMap_["turnOff"] = &DeviceProcessor::process_turnOff;
    processMap_["powerSavingMode"] = &DeviceProcessor::process_powerSavingMode;
    processMap_["getDeviceState"] = &DeviceProcessor::process_getDeviceState;
  }

  virtual ~DeviceProcessor() {}
};

class DeviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DeviceProcessorFactory(const ::std::shared_ptr< DeviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DeviceIfFactory > handlerFactory_;
};

class DeviceMultiface : virtual public DeviceIf {
 public:
  DeviceMultiface(std::vector<std::shared_ptr<DeviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DeviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<DeviceIf> > ifaces_;
  DeviceMultiface() {}
  void add(::std::shared_ptr<DeviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void turnOn(ReplyStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->turnOn(_return);
    }
    ifaces_[i]->turnOn(_return);
    return;
  }

  void turnOff(ReplyStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->turnOff(_return);
    }
    ifaces_[i]->turnOff(_return);
    return;
  }

  void powerSavingMode(ReplyStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->powerSavingMode(_return);
    }
    ifaces_[i]->powerSavingMode(_return);
    return;
  }

  DeviceState::type getDeviceState() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceState();
    }
    return ifaces_[i]->getDeviceState();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DeviceConcurrentClient : virtual public DeviceIf {
 public:
  DeviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DeviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void turnOn(ReplyStatus& _return);
  int32_t send_turnOn();
  void recv_turnOn(ReplyStatus& _return, const int32_t seqid);
  void turnOff(ReplyStatus& _return);
  int32_t send_turnOff();
  void recv_turnOff(ReplyStatus& _return, const int32_t seqid);
  void powerSavingMode(ReplyStatus& _return);
  int32_t send_powerSavingMode();
  void recv_powerSavingMode(ReplyStatus& _return, const int32_t seqid);
  DeviceState::type getDeviceState();
  int32_t send_getDeviceState();
  DeviceState::type recv_getDeviceState(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
