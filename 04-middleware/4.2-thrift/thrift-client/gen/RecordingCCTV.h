/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RecordingCCTV_H
#define RecordingCCTV_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "intelligent_house_types.h"
#include "CCTV.h"

namespace inthouse {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RecordingCCTVIf : virtual public CCTVIf {
 public:
  virtual ~RecordingCCTVIf() {}
  virtual void captureVideo(std::vector<Image> & _return, const std::string& dateFrom, const std::string& dateTo) = 0;
};

class RecordingCCTVIfFactory : virtual public CCTVIfFactory {
 public:
  typedef RecordingCCTVIf Handler;

  virtual ~RecordingCCTVIfFactory() {}

  virtual RecordingCCTVIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceIf* /* handler */) = 0;
};

class RecordingCCTVIfSingletonFactory : virtual public RecordingCCTVIfFactory {
 public:
  RecordingCCTVIfSingletonFactory(const ::std::shared_ptr<RecordingCCTVIf>& iface) : iface_(iface) {}
  virtual ~RecordingCCTVIfSingletonFactory() {}

  virtual RecordingCCTVIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<RecordingCCTVIf> iface_;
};

class RecordingCCTVNull : virtual public RecordingCCTVIf , virtual public CCTVNull {
 public:
  virtual ~RecordingCCTVNull() {}
  void captureVideo(std::vector<Image> & /* _return */, const std::string& /* dateFrom */, const std::string& /* dateTo */) {
    return;
  }
};

typedef struct _RecordingCCTV_captureVideo_args__isset {
  _RecordingCCTV_captureVideo_args__isset() : dateFrom(false), dateTo(false) {}
  bool dateFrom :1;
  bool dateTo :1;
} _RecordingCCTV_captureVideo_args__isset;

class RecordingCCTV_captureVideo_args {
 public:

  RecordingCCTV_captureVideo_args(const RecordingCCTV_captureVideo_args&);
  RecordingCCTV_captureVideo_args& operator=(const RecordingCCTV_captureVideo_args&);
  RecordingCCTV_captureVideo_args() : dateFrom(), dateTo() {
  }

  virtual ~RecordingCCTV_captureVideo_args() noexcept;
  std::string dateFrom;
  std::string dateTo;

  _RecordingCCTV_captureVideo_args__isset __isset;

  void __set_dateFrom(const std::string& val);

  void __set_dateTo(const std::string& val);

  bool operator == (const RecordingCCTV_captureVideo_args & rhs) const
  {
    if (!(dateFrom == rhs.dateFrom))
      return false;
    if (!(dateTo == rhs.dateTo))
      return false;
    return true;
  }
  bool operator != (const RecordingCCTV_captureVideo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordingCCTV_captureVideo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecordingCCTV_captureVideo_pargs {
 public:


  virtual ~RecordingCCTV_captureVideo_pargs() noexcept;
  const std::string* dateFrom;
  const std::string* dateTo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecordingCCTV_captureVideo_result__isset {
  _RecordingCCTV_captureVideo_result__isset() : success(false), ex(false), ex2(false) {}
  bool success :1;
  bool ex :1;
  bool ex2 :1;
} _RecordingCCTV_captureVideo_result__isset;

class RecordingCCTV_captureVideo_result {
 public:

  RecordingCCTV_captureVideo_result(const RecordingCCTV_captureVideo_result&);
  RecordingCCTV_captureVideo_result& operator=(const RecordingCCTV_captureVideo_result&);
  RecordingCCTV_captureVideo_result() {
  }

  virtual ~RecordingCCTV_captureVideo_result() noexcept;
  std::vector<Image>  success;
  InvalidDateFormat ex;
  NoData ex2;

  _RecordingCCTV_captureVideo_result__isset __isset;

  void __set_success(const std::vector<Image> & val);

  void __set_ex(const InvalidDateFormat& val);

  void __set_ex2(const NoData& val);

  bool operator == (const RecordingCCTV_captureVideo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const RecordingCCTV_captureVideo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecordingCCTV_captureVideo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecordingCCTV_captureVideo_presult__isset {
  _RecordingCCTV_captureVideo_presult__isset() : success(false), ex(false), ex2(false) {}
  bool success :1;
  bool ex :1;
  bool ex2 :1;
} _RecordingCCTV_captureVideo_presult__isset;

class RecordingCCTV_captureVideo_presult {
 public:


  virtual ~RecordingCCTV_captureVideo_presult() noexcept;
  std::vector<Image> * success;
  InvalidDateFormat ex;
  NoData ex2;

  _RecordingCCTV_captureVideo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RecordingCCTVClient : virtual public RecordingCCTVIf, public CCTVClient {
 public:
  RecordingCCTVClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    CCTVClient(prot, prot) {}
  RecordingCCTVClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    CCTVClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void captureVideo(std::vector<Image> & _return, const std::string& dateFrom, const std::string& dateTo);
  void send_captureVideo(const std::string& dateFrom, const std::string& dateTo);
  void recv_captureVideo(std::vector<Image> & _return);
};

class RecordingCCTVProcessor : public CCTVProcessor {
 protected:
  ::std::shared_ptr<RecordingCCTVIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RecordingCCTVProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_captureVideo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RecordingCCTVProcessor(::std::shared_ptr<RecordingCCTVIf> iface) :
    CCTVProcessor(iface),
    iface_(iface) {
    processMap_["captureVideo"] = &RecordingCCTVProcessor::process_captureVideo;
  }

  virtual ~RecordingCCTVProcessor() {}
};

class RecordingCCTVProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RecordingCCTVProcessorFactory(const ::std::shared_ptr< RecordingCCTVIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< RecordingCCTVIfFactory > handlerFactory_;
};

class RecordingCCTVMultiface : virtual public RecordingCCTVIf, public CCTVMultiface {
 public:
  RecordingCCTVMultiface(std::vector<std::shared_ptr<RecordingCCTVIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<RecordingCCTVIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      CCTVMultiface::add(*iter);
    }
  }
  virtual ~RecordingCCTVMultiface() {}
 protected:
  std::vector<std::shared_ptr<RecordingCCTVIf> > ifaces_;
  RecordingCCTVMultiface() {}
  void add(::std::shared_ptr<RecordingCCTVIf> iface) {
    CCTVMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void captureVideo(std::vector<Image> & _return, const std::string& dateFrom, const std::string& dateTo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->captureVideo(_return, dateFrom, dateTo);
    }
    ifaces_[i]->captureVideo(_return, dateFrom, dateTo);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RecordingCCTVConcurrentClient : virtual public RecordingCCTVIf, public CCTVConcurrentClient {
 public:
  RecordingCCTVConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    CCTVConcurrentClient(prot, prot, sync) {}
  RecordingCCTVConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    CCTVConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void captureVideo(std::vector<Image> & _return, const std::string& dateFrom, const std::string& dateTo);
  int32_t send_captureVideo(const std::string& dateFrom, const std::string& dateTo);
  void recv_captureVideo(std::vector<Image> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
