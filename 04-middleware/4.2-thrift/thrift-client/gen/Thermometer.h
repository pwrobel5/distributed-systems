/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Thermometer_H
#define Thermometer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "intelligent_house_types.h"
#include "Device.h"

namespace inthouse {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ThermometerIf : virtual public DeviceIf {
 public:
  virtual ~ThermometerIf() {}
  virtual double getCurrentTemperature() = 0;
  virtual void getTemperatureHistory(std::vector<double> & _return, const std::string& dateFrom, const std::string& dateTo) = 0;
};

class ThermometerIfFactory : virtual public DeviceIfFactory {
 public:
  typedef ThermometerIf Handler;

  virtual ~ThermometerIfFactory() {}

  virtual ThermometerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceIf* /* handler */) = 0;
};

class ThermometerIfSingletonFactory : virtual public ThermometerIfFactory {
 public:
  ThermometerIfSingletonFactory(const ::std::shared_ptr<ThermometerIf>& iface) : iface_(iface) {}
  virtual ~ThermometerIfSingletonFactory() {}

  virtual ThermometerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ThermometerIf> iface_;
};

class ThermometerNull : virtual public ThermometerIf , virtual public DeviceNull {
 public:
  virtual ~ThermometerNull() {}
  double getCurrentTemperature() {
    double _return = (double)0;
    return _return;
  }
  void getTemperatureHistory(std::vector<double> & /* _return */, const std::string& /* dateFrom */, const std::string& /* dateTo */) {
    return;
  }
};


class Thermometer_getCurrentTemperature_args {
 public:

  Thermometer_getCurrentTemperature_args(const Thermometer_getCurrentTemperature_args&);
  Thermometer_getCurrentTemperature_args& operator=(const Thermometer_getCurrentTemperature_args&);
  Thermometer_getCurrentTemperature_args() {
  }

  virtual ~Thermometer_getCurrentTemperature_args() noexcept;

  bool operator == (const Thermometer_getCurrentTemperature_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Thermometer_getCurrentTemperature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Thermometer_getCurrentTemperature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Thermometer_getCurrentTemperature_pargs {
 public:


  virtual ~Thermometer_getCurrentTemperature_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Thermometer_getCurrentTemperature_result__isset {
  _Thermometer_getCurrentTemperature_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Thermometer_getCurrentTemperature_result__isset;

class Thermometer_getCurrentTemperature_result {
 public:

  Thermometer_getCurrentTemperature_result(const Thermometer_getCurrentTemperature_result&);
  Thermometer_getCurrentTemperature_result& operator=(const Thermometer_getCurrentTemperature_result&);
  Thermometer_getCurrentTemperature_result() : success(0) {
  }

  virtual ~Thermometer_getCurrentTemperature_result() noexcept;
  double success;
  NoData ex;

  _Thermometer_getCurrentTemperature_result__isset __isset;

  void __set_success(const double val);

  void __set_ex(const NoData& val);

  bool operator == (const Thermometer_getCurrentTemperature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const Thermometer_getCurrentTemperature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Thermometer_getCurrentTemperature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Thermometer_getCurrentTemperature_presult__isset {
  _Thermometer_getCurrentTemperature_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _Thermometer_getCurrentTemperature_presult__isset;

class Thermometer_getCurrentTemperature_presult {
 public:


  virtual ~Thermometer_getCurrentTemperature_presult() noexcept;
  double* success;
  NoData ex;

  _Thermometer_getCurrentTemperature_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Thermometer_getTemperatureHistory_args__isset {
  _Thermometer_getTemperatureHistory_args__isset() : dateFrom(false), dateTo(false) {}
  bool dateFrom :1;
  bool dateTo :1;
} _Thermometer_getTemperatureHistory_args__isset;

class Thermometer_getTemperatureHistory_args {
 public:

  Thermometer_getTemperatureHistory_args(const Thermometer_getTemperatureHistory_args&);
  Thermometer_getTemperatureHistory_args& operator=(const Thermometer_getTemperatureHistory_args&);
  Thermometer_getTemperatureHistory_args() : dateFrom(), dateTo() {
  }

  virtual ~Thermometer_getTemperatureHistory_args() noexcept;
  std::string dateFrom;
  std::string dateTo;

  _Thermometer_getTemperatureHistory_args__isset __isset;

  void __set_dateFrom(const std::string& val);

  void __set_dateTo(const std::string& val);

  bool operator == (const Thermometer_getTemperatureHistory_args & rhs) const
  {
    if (!(dateFrom == rhs.dateFrom))
      return false;
    if (!(dateTo == rhs.dateTo))
      return false;
    return true;
  }
  bool operator != (const Thermometer_getTemperatureHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Thermometer_getTemperatureHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Thermometer_getTemperatureHistory_pargs {
 public:


  virtual ~Thermometer_getTemperatureHistory_pargs() noexcept;
  const std::string* dateFrom;
  const std::string* dateTo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Thermometer_getTemperatureHistory_result__isset {
  _Thermometer_getTemperatureHistory_result__isset() : success(false), ex(false), ex2(false) {}
  bool success :1;
  bool ex :1;
  bool ex2 :1;
} _Thermometer_getTemperatureHistory_result__isset;

class Thermometer_getTemperatureHistory_result {
 public:

  Thermometer_getTemperatureHistory_result(const Thermometer_getTemperatureHistory_result&);
  Thermometer_getTemperatureHistory_result& operator=(const Thermometer_getTemperatureHistory_result&);
  Thermometer_getTemperatureHistory_result() {
  }

  virtual ~Thermometer_getTemperatureHistory_result() noexcept;
  std::vector<double>  success;
  InvalidDateFormat ex;
  NoData ex2;

  _Thermometer_getTemperatureHistory_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_ex(const InvalidDateFormat& val);

  void __set_ex2(const NoData& val);

  bool operator == (const Thermometer_getTemperatureHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const Thermometer_getTemperatureHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Thermometer_getTemperatureHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Thermometer_getTemperatureHistory_presult__isset {
  _Thermometer_getTemperatureHistory_presult__isset() : success(false), ex(false), ex2(false) {}
  bool success :1;
  bool ex :1;
  bool ex2 :1;
} _Thermometer_getTemperatureHistory_presult__isset;

class Thermometer_getTemperatureHistory_presult {
 public:


  virtual ~Thermometer_getTemperatureHistory_presult() noexcept;
  std::vector<double> * success;
  InvalidDateFormat ex;
  NoData ex2;

  _Thermometer_getTemperatureHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThermometerClient : virtual public ThermometerIf, public DeviceClient {
 public:
  ThermometerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    DeviceClient(prot, prot) {}
  ThermometerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    DeviceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getCurrentTemperature();
  void send_getCurrentTemperature();
  double recv_getCurrentTemperature();
  void getTemperatureHistory(std::vector<double> & _return, const std::string& dateFrom, const std::string& dateTo);
  void send_getTemperatureHistory(const std::string& dateFrom, const std::string& dateTo);
  void recv_getTemperatureHistory(std::vector<double> & _return);
};

class ThermometerProcessor : public DeviceProcessor {
 protected:
  ::std::shared_ptr<ThermometerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThermometerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCurrentTemperature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTemperatureHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThermometerProcessor(::std::shared_ptr<ThermometerIf> iface) :
    DeviceProcessor(iface),
    iface_(iface) {
    processMap_["getCurrentTemperature"] = &ThermometerProcessor::process_getCurrentTemperature;
    processMap_["getTemperatureHistory"] = &ThermometerProcessor::process_getTemperatureHistory;
  }

  virtual ~ThermometerProcessor() {}
};

class ThermometerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThermometerProcessorFactory(const ::std::shared_ptr< ThermometerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ThermometerIfFactory > handlerFactory_;
};

class ThermometerMultiface : virtual public ThermometerIf, public DeviceMultiface {
 public:
  ThermometerMultiface(std::vector<std::shared_ptr<ThermometerIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<ThermometerIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      DeviceMultiface::add(*iter);
    }
  }
  virtual ~ThermometerMultiface() {}
 protected:
  std::vector<std::shared_ptr<ThermometerIf> > ifaces_;
  ThermometerMultiface() {}
  void add(::std::shared_ptr<ThermometerIf> iface) {
    DeviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  double getCurrentTemperature() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentTemperature();
    }
    return ifaces_[i]->getCurrentTemperature();
  }

  void getTemperatureHistory(std::vector<double> & _return, const std::string& dateFrom, const std::string& dateTo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTemperatureHistory(_return, dateFrom, dateTo);
    }
    ifaces_[i]->getTemperatureHistory(_return, dateFrom, dateTo);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ThermometerConcurrentClient : virtual public ThermometerIf, public DeviceConcurrentClient {
 public:
  ThermometerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    DeviceConcurrentClient(prot, prot, sync) {}
  ThermometerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    DeviceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getCurrentTemperature();
  int32_t send_getCurrentTemperature();
  double recv_getCurrentTemperature(const int32_t seqid);
  void getTemperatureHistory(std::vector<double> & _return, const std::string& dateFrom, const std::string& dateTo);
  int32_t send_getTemperatureHistory(const std::string& dateFrom, const std::string& dateTo);
  void recv_getTemperatureHistory(std::vector<double> & _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
