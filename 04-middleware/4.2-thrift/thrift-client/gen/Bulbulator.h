/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Bulbulator_H
#define Bulbulator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "intelligent_house_types.h"
#include "Device.h"

namespace inthouse {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BulbulatorIf : virtual public DeviceIf {
 public:
  virtual ~BulbulatorIf() {}
  virtual void makeBulbulbul(ReplyStatus& _return) = 0;
};

class BulbulatorIfFactory : virtual public DeviceIfFactory {
 public:
  typedef BulbulatorIf Handler;

  virtual ~BulbulatorIfFactory() {}

  virtual BulbulatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceIf* /* handler */) = 0;
};

class BulbulatorIfSingletonFactory : virtual public BulbulatorIfFactory {
 public:
  BulbulatorIfSingletonFactory(const ::std::shared_ptr<BulbulatorIf>& iface) : iface_(iface) {}
  virtual ~BulbulatorIfSingletonFactory() {}

  virtual BulbulatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<BulbulatorIf> iface_;
};

class BulbulatorNull : virtual public BulbulatorIf , virtual public DeviceNull {
 public:
  virtual ~BulbulatorNull() {}
  void makeBulbulbul(ReplyStatus& /* _return */) {
    return;
  }
};


class Bulbulator_makeBulbulbul_args {
 public:

  Bulbulator_makeBulbulbul_args(const Bulbulator_makeBulbulbul_args&);
  Bulbulator_makeBulbulbul_args& operator=(const Bulbulator_makeBulbulbul_args&);
  Bulbulator_makeBulbulbul_args() {
  }

  virtual ~Bulbulator_makeBulbulbul_args() noexcept;

  bool operator == (const Bulbulator_makeBulbulbul_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Bulbulator_makeBulbulbul_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bulbulator_makeBulbulbul_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Bulbulator_makeBulbulbul_pargs {
 public:


  virtual ~Bulbulator_makeBulbulbul_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bulbulator_makeBulbulbul_result__isset {
  _Bulbulator_makeBulbulbul_result__isset() : success(false) {}
  bool success :1;
} _Bulbulator_makeBulbulbul_result__isset;

class Bulbulator_makeBulbulbul_result {
 public:

  Bulbulator_makeBulbulbul_result(const Bulbulator_makeBulbulbul_result&);
  Bulbulator_makeBulbulbul_result& operator=(const Bulbulator_makeBulbulbul_result&);
  Bulbulator_makeBulbulbul_result() {
  }

  virtual ~Bulbulator_makeBulbulbul_result() noexcept;
  ReplyStatus success;

  _Bulbulator_makeBulbulbul_result__isset __isset;

  void __set_success(const ReplyStatus& val);

  bool operator == (const Bulbulator_makeBulbulbul_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Bulbulator_makeBulbulbul_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bulbulator_makeBulbulbul_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bulbulator_makeBulbulbul_presult__isset {
  _Bulbulator_makeBulbulbul_presult__isset() : success(false) {}
  bool success :1;
} _Bulbulator_makeBulbulbul_presult__isset;

class Bulbulator_makeBulbulbul_presult {
 public:


  virtual ~Bulbulator_makeBulbulbul_presult() noexcept;
  ReplyStatus* success;

  _Bulbulator_makeBulbulbul_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BulbulatorClient : virtual public BulbulatorIf, public DeviceClient {
 public:
  BulbulatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    DeviceClient(prot, prot) {}
  BulbulatorClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    DeviceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void makeBulbulbul(ReplyStatus& _return);
  void send_makeBulbulbul();
  void recv_makeBulbulbul(ReplyStatus& _return);
};

class BulbulatorProcessor : public DeviceProcessor {
 protected:
  ::std::shared_ptr<BulbulatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BulbulatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_makeBulbulbul(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BulbulatorProcessor(::std::shared_ptr<BulbulatorIf> iface) :
    DeviceProcessor(iface),
    iface_(iface) {
    processMap_["makeBulbulbul"] = &BulbulatorProcessor::process_makeBulbulbul;
  }

  virtual ~BulbulatorProcessor() {}
};

class BulbulatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BulbulatorProcessorFactory(const ::std::shared_ptr< BulbulatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< BulbulatorIfFactory > handlerFactory_;
};

class BulbulatorMultiface : virtual public BulbulatorIf, public DeviceMultiface {
 public:
  BulbulatorMultiface(std::vector<std::shared_ptr<BulbulatorIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<BulbulatorIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      DeviceMultiface::add(*iter);
    }
  }
  virtual ~BulbulatorMultiface() {}
 protected:
  std::vector<std::shared_ptr<BulbulatorIf> > ifaces_;
  BulbulatorMultiface() {}
  void add(::std::shared_ptr<BulbulatorIf> iface) {
    DeviceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void makeBulbulbul(ReplyStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->makeBulbulbul(_return);
    }
    ifaces_[i]->makeBulbulbul(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BulbulatorConcurrentClient : virtual public BulbulatorIf, public DeviceConcurrentClient {
 public:
  BulbulatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    DeviceConcurrentClient(prot, prot, sync) {}
  BulbulatorConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    DeviceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void makeBulbulbul(ReplyStatus& _return);
  int32_t send_makeBulbulbul();
  void recv_makeBulbulbul(ReplyStatus& _return, const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
