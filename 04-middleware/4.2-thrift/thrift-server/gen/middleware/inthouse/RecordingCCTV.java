/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package middleware.inthouse;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-26")
public class RecordingCCTV {

  public interface Iface extends CCTV.Iface {

    public java.util.List<Image> captureVideo(java.lang.String dateFrom, java.lang.String dateTo) throws InvalidDateFormat, NoData, org.apache.thrift.TException;

  }

  public interface AsyncIface extends CCTV .AsyncIface {

    public void captureVideo(java.lang.String dateFrom, java.lang.String dateTo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends CCTV.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<Image> captureVideo(java.lang.String dateFrom, java.lang.String dateTo) throws InvalidDateFormat, NoData, org.apache.thrift.TException
    {
      send_captureVideo(dateFrom, dateTo);
      return recv_captureVideo();
    }

    public void send_captureVideo(java.lang.String dateFrom, java.lang.String dateTo) throws org.apache.thrift.TException
    {
      captureVideo_args args = new captureVideo_args();
      args.setDateFrom(dateFrom);
      args.setDateTo(dateTo);
      sendBase("captureVideo", args);
    }

    public java.util.List<Image> recv_captureVideo() throws InvalidDateFormat, NoData, org.apache.thrift.TException
    {
      captureVideo_result result = new captureVideo_result();
      receiveBase(result, "captureVideo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "captureVideo failed: unknown result");
    }

  }
  public static class AsyncClient extends CCTV.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void captureVideo(java.lang.String dateFrom, java.lang.String dateTo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      captureVideo_call method_call = new captureVideo_call(dateFrom, dateTo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class captureVideo_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Image>> {
      private java.lang.String dateFrom;
      private java.lang.String dateTo;
      public captureVideo_call(java.lang.String dateFrom, java.lang.String dateTo, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("captureVideo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        captureVideo_args args = new captureVideo_args();
        args.setDateFrom(dateFrom);
        args.setDateTo(dateTo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Image> getResult() throws InvalidDateFormat, NoData, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_captureVideo();
      }
    }

  }

  public static class Processor<I extends Iface> extends CCTV.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("captureVideo", new captureVideo());
      return processMap;
    }

    public static class captureVideo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, captureVideo_args> {
      public captureVideo() {
        super("captureVideo");
      }

      public captureVideo_args getEmptyArgsInstance() {
        return new captureVideo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public captureVideo_result getResult(I iface, captureVideo_args args) throws org.apache.thrift.TException {
        captureVideo_result result = new captureVideo_result();
        try {
          result.success = iface.captureVideo(args.dateFrom, args.dateTo);
        } catch (InvalidDateFormat ex) {
          result.ex = ex;
        } catch (NoData ex2) {
          result.ex2 = ex2;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends CCTV.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("captureVideo", new captureVideo());
      return processMap;
    }

    public static class captureVideo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, captureVideo_args, java.util.List<Image>> {
      public captureVideo() {
        super("captureVideo");
      }

      public captureVideo_args getEmptyArgsInstance() {
        return new captureVideo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>>() { 
          public void onComplete(java.util.List<Image> o) {
            captureVideo_result result = new captureVideo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            captureVideo_result result = new captureVideo_result();
            if (e instanceof InvalidDateFormat) {
              result.ex = (InvalidDateFormat) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof NoData) {
              result.ex2 = (NoData) e;
              result.setEx2IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, captureVideo_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Image>> resultHandler) throws org.apache.thrift.TException {
        iface.captureVideo(args.dateFrom, args.dateTo,resultHandler);
      }
    }

  }

  public static class captureVideo_args implements org.apache.thrift.TBase<captureVideo_args, captureVideo_args._Fields>, java.io.Serializable, Cloneable, Comparable<captureVideo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("captureVideo_args");

    private static final org.apache.thrift.protocol.TField DATE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("dateFrom", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new captureVideo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new captureVideo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dateFrom; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String dateTo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE_FROM((short)1, "dateFrom"),
      DATE_TO((short)2, "dateTo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE_FROM
            return DATE_FROM;
          case 2: // DATE_TO
            return DATE_TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE_FROM, new org.apache.thrift.meta_data.FieldMetaData("dateFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE_TO, new org.apache.thrift.meta_data.FieldMetaData("dateTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(captureVideo_args.class, metaDataMap);
    }

    public captureVideo_args() {
    }

    public captureVideo_args(
      java.lang.String dateFrom,
      java.lang.String dateTo)
    {
      this();
      this.dateFrom = dateFrom;
      this.dateTo = dateTo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public captureVideo_args(captureVideo_args other) {
      if (other.isSetDateFrom()) {
        this.dateFrom = other.dateFrom;
      }
      if (other.isSetDateTo()) {
        this.dateTo = other.dateTo;
      }
    }

    public captureVideo_args deepCopy() {
      return new captureVideo_args(this);
    }

    @Override
    public void clear() {
      this.dateFrom = null;
      this.dateTo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDateFrom() {
      return this.dateFrom;
    }

    public captureVideo_args setDateFrom(@org.apache.thrift.annotation.Nullable java.lang.String dateFrom) {
      this.dateFrom = dateFrom;
      return this;
    }

    public void unsetDateFrom() {
      this.dateFrom = null;
    }

    /** Returns true if field dateFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetDateFrom() {
      return this.dateFrom != null;
    }

    public void setDateFromIsSet(boolean value) {
      if (!value) {
        this.dateFrom = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDateTo() {
      return this.dateTo;
    }

    public captureVideo_args setDateTo(@org.apache.thrift.annotation.Nullable java.lang.String dateTo) {
      this.dateTo = dateTo;
      return this;
    }

    public void unsetDateTo() {
      this.dateTo = null;
    }

    /** Returns true if field dateTo is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTo() {
      return this.dateTo != null;
    }

    public void setDateToIsSet(boolean value) {
      if (!value) {
        this.dateTo = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DATE_FROM:
        if (value == null) {
          unsetDateFrom();
        } else {
          setDateFrom((java.lang.String)value);
        }
        break;

      case DATE_TO:
        if (value == null) {
          unsetDateTo();
        } else {
          setDateTo((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE_FROM:
        return getDateFrom();

      case DATE_TO:
        return getDateTo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DATE_FROM:
        return isSetDateFrom();
      case DATE_TO:
        return isSetDateTo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof captureVideo_args)
        return this.equals((captureVideo_args)that);
      return false;
    }

    public boolean equals(captureVideo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dateFrom = true && this.isSetDateFrom();
      boolean that_present_dateFrom = true && that.isSetDateFrom();
      if (this_present_dateFrom || that_present_dateFrom) {
        if (!(this_present_dateFrom && that_present_dateFrom))
          return false;
        if (!this.dateFrom.equals(that.dateFrom))
          return false;
      }

      boolean this_present_dateTo = true && this.isSetDateTo();
      boolean that_present_dateTo = true && that.isSetDateTo();
      if (this_present_dateTo || that_present_dateTo) {
        if (!(this_present_dateTo && that_present_dateTo))
          return false;
        if (!this.dateTo.equals(that.dateTo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDateFrom()) ? 131071 : 524287);
      if (isSetDateFrom())
        hashCode = hashCode * 8191 + dateFrom.hashCode();

      hashCode = hashCode * 8191 + ((isSetDateTo()) ? 131071 : 524287);
      if (isSetDateTo())
        hashCode = hashCode * 8191 + dateTo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(captureVideo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDateFrom()).compareTo(other.isSetDateFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateFrom, other.dateFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDateTo()).compareTo(other.isSetDateTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTo, other.dateTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("captureVideo_args(");
      boolean first = true;

      sb.append("dateFrom:");
      if (this.dateFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.dateFrom);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateTo:");
      if (this.dateTo == null) {
        sb.append("null");
      } else {
        sb.append(this.dateTo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class captureVideo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureVideo_argsStandardScheme getScheme() {
        return new captureVideo_argsStandardScheme();
      }
    }

    private static class captureVideo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<captureVideo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, captureVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dateFrom = iprot.readString();
                struct.setDateFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dateTo = iprot.readString();
                struct.setDateToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, captureVideo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dateFrom != null) {
          oprot.writeFieldBegin(DATE_FROM_FIELD_DESC);
          oprot.writeString(struct.dateFrom);
          oprot.writeFieldEnd();
        }
        if (struct.dateTo != null) {
          oprot.writeFieldBegin(DATE_TO_FIELD_DESC);
          oprot.writeString(struct.dateTo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class captureVideo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureVideo_argsTupleScheme getScheme() {
        return new captureVideo_argsTupleScheme();
      }
    }

    private static class captureVideo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<captureVideo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, captureVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDateFrom()) {
          optionals.set(0);
        }
        if (struct.isSetDateTo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDateFrom()) {
          oprot.writeString(struct.dateFrom);
        }
        if (struct.isSetDateTo()) {
          oprot.writeString(struct.dateTo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, captureVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dateFrom = iprot.readString();
          struct.setDateFromIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dateTo = iprot.readString();
          struct.setDateToIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class captureVideo_result implements org.apache.thrift.TBase<captureVideo_result, captureVideo_result._Fields>, java.io.Serializable, Cloneable, Comparable<captureVideo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("captureVideo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EX2_FIELD_DESC = new org.apache.thrift.protocol.TField("ex2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new captureVideo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new captureVideo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Image> success; // required
    public @org.apache.thrift.annotation.Nullable InvalidDateFormat ex; // required
    public @org.apache.thrift.annotation.Nullable NoData ex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex"),
      EX2((short)2, "ex2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          case 2: // EX2
            return EX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Image.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidDateFormat.class)));
      tmpMap.put(_Fields.EX2, new org.apache.thrift.meta_data.FieldMetaData("ex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NoData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(captureVideo_result.class, metaDataMap);
    }

    public captureVideo_result() {
    }

    public captureVideo_result(
      java.util.List<Image> success,
      InvalidDateFormat ex,
      NoData ex2)
    {
      this();
      this.success = success;
      this.ex = ex;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public captureVideo_result(captureVideo_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Image> __this__success = new java.util.ArrayList<Image>(other.success.size());
        for (Image other_element : other.success) {
          __this__success.add(new Image(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new InvalidDateFormat(other.ex);
      }
      if (other.isSetEx2()) {
        this.ex2 = new NoData(other.ex2);
      }
    }

    public captureVideo_result deepCopy() {
      return new captureVideo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
      this.ex2 = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Image> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Image elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Image>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Image> getSuccess() {
      return this.success;
    }

    public captureVideo_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Image> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidDateFormat getEx() {
      return this.ex;
    }

    public captureVideo_result setEx(@org.apache.thrift.annotation.Nullable InvalidDateFormat ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NoData getEx2() {
      return this.ex2;
    }

    public captureVideo_result setEx2(@org.apache.thrift.annotation.Nullable NoData ex2) {
      this.ex2 = ex2;
      return this;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    /** Returns true if field ex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setEx2IsSet(boolean value) {
      if (!value) {
        this.ex2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Image>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidDateFormat)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((NoData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      case EX2:
        return getEx2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      case EX2:
        return isSetEx2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof captureVideo_result)
        return this.equals((captureVideo_result)that);
      return false;
    }

    public boolean equals(captureVideo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx2()) ? 131071 : 524287);
      if (isSetEx2())
        hashCode = hashCode * 8191 + ex2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(captureVideo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx2()).compareTo(other.isSetEx2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex2, other.ex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("captureVideo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class captureVideo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureVideo_resultStandardScheme getScheme() {
        return new captureVideo_resultStandardScheme();
      }
    }

    private static class captureVideo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<captureVideo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, captureVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Image>(_list8.size);
                  @org.apache.thrift.annotation.Nullable Image _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Image();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidDateFormat();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EX2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex2 = new NoData();
                struct.ex2.read(iprot);
                struct.setEx2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, captureVideo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Image _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex2 != null) {
          oprot.writeFieldBegin(EX2_FIELD_DESC);
          struct.ex2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class captureVideo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public captureVideo_resultTupleScheme getScheme() {
        return new captureVideo_resultTupleScheme();
      }
    }

    private static class captureVideo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<captureVideo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, captureVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        if (struct.isSetEx2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Image _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
        if (struct.isSetEx2()) {
          struct.ex2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, captureVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Image>(_list13.size);
            @org.apache.thrift.annotation.Nullable Image _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Image();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidDateFormat();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ex2 = new NoData();
          struct.ex2.read(iprot);
          struct.setEx2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
